Project Summary
Getting cheap resources for a student can be difficult, especially on a low budget. Without these cheap resources, students tend to spend a lot of their monthly budget on food, books and other materials. D-Bay, a web application, will fix this problem by allowing students to buy cheaper resources from each other. D-Bay will allow students to post listings online with specified prices so students can buy these resources from each other.
Students will have access to a public section where all listings will be visible. These listings will include a small description describing the product along with the seller’s contact information. Buyers will be able to comment and like postings as well and will have an option to follow a specific seller. This will not only allow students access to used books but will also allow sellers to build their brand image. Instead of books, they can sell other materials as well. For example, someone can build their cosmetics or food brand, while staying in college, for college audiences. Potential buyers can in turn become sellers as well by posting their own listings and allowing other students to follow or contact them.

Significance
D-Bay is an important application because it resolves many of the issues students experience today. Each semester, students are forced to buy new books online and have to spend loads of money on this. Even students who are done using these books after a semester and are in no need of using them again are left with no choice but to throw these books away. The application will thus give them an opportunity to earn money and recycle resources. The application will especially be useful for incoming freshmen and graduating seniors. Freshmen, especially international freshmen who cannot bring appliances from their homes, can look for cheap used appliances on this application.
Graduating seniors, who are usually left with no choice but to throw their appliances away, can use this platform to earn money by selling their used appliances on D-Bay.
D-Bay also proves to be helpful for students who are looking to establish their brand. Students, especially business students who are looking for such an experience, can use this free platform to sell unique products, specific to their brand. As more people follow you, you will have more followers to support your brand. These followers will be able to keep a tab on every new listing of the seller to check if another product came out or not.
D-Bay will also help build a sense of community on campus, especially for international and marginalized communities. For example, food for international students still remains a big concern today. An international student can make home-cooked food and sell food to international communities through the web application.
The complexity of this application involves connecting to a remote database, executing web requests, managing student listings and information, and designing an easy-to-understand user interface. Most of the scope of this project does not relate to any of the material taught in DePauw’s computer science department, but rather information obtained through online courses.
Required Tools & Availability
This project will require access to a computer and Visual Studio Code. I will be using my personal MacBook, which already has VS Code downloaded. In VS Code, I will be coding in JavaScript and will be connecting to MongoDB database through it as well.

Project Specifications
Functional Specifications
Users will be able to register for the application using a register page. Their name and other personal details will be inserted and then stored in the MongoDB database. After registering, they will be able to log into the application where they will be allowed to like or comment on other listings and will also have an option to follow other users. The information about liking, commenting and following will also be stored in the remote database and each request will be sent using the API between the frontend (React) and backend (Express). Users will be allowed to post their listings as well. These posts must include contact information, a price estimate, short description of the product and an image of the product. All this information will be inserted into the database. Users will be able to see public listings and user-specific listings. This is again just the information that is being fetched from the database client.

User Interface Specification
The Register page will include boxes where users will need to insert their names and contact information. This will be a simple page and will be created using Bootstrap CSS and React. After logging in, users will be able to see a header with a DePauw wallpaper. The title of the application will be above this header. Under the header, students will see a post box. It is this post box that the users will use to post their listing. Users will also have an option to select specific word features (like bold or italic text). Under the post box, students will be able to take a look at all the listings. Each listing (including the product image) will be on top of each other. Students can scroll to look listings that are underneath. There will also be a like button and comment box under each post. At the top of each post, the seller’s ID will be present. Students can click the ID to follow or look at the user-specific listings page of these sellers.
All these postings will be on the left side of the website. At the right side, all the users that the logged-in user follows, will be visible. The logged-in student can search for specific followed users in the search box and can click on their IDs to look at the specific user’s listings.
All the frontend UI will be using Bootstrap CSS and React.js.

Technical Details
I will be using a non-relational database: MongoDB. This database will be used within the Express.js environment using Mongoose. Each user’s collection will include their posts, including the comments and likes that the specific post got. This collection will be linked to a specific user (which in turn includes their name and contact information). The frontend (React) will be sending GET and POST requests while creating user profiles and posts and while fetching posts on the public as well as user-specific listings page using an API. In the backend, Mongoose client will help complete these requests in the Express.js environment.
While this may seem like an excessive amount of work to achieve results, the tradeoffs are that it is free/does not require subscription to a service and that there are no paid external APIs that my application will require.

Deviations from Original Proposal & Justifications
1. I added a forget your password page, something that was not initially planned because I wanted to give my user this extra functionality to change password in case, they forget them.
2. I chose a different header on my webpages than a DePauw image because it looked more elegant.
3. I added a personal dashboard page so users can just look at their posts and at the posts of people they are following.
4. I added a functioning navigation bar (home, dashboard, user profile and logout links) with a dropdown menu to ease user navigation experience.
5. I added a logged-in user edit profile page, something that was not initially planned, so users can easily edit their posts and personal information on a separate page.
6. I added a user search bar to help users search for another user easily. This allows people to search for specific type of items as well (so they can only follow the people or items that they are interested in).
7. I decided to store user images on the Cloudinary platform to save data costs and for more private data security.
8. I added a separate page to unfollow users, so users can easily take a look at all the users they follow and can unfollow users as well.
9. I added a feature to delete comments as well (earlier I had planned to add an option to delete and edit posts only).
